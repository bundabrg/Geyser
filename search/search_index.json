{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Geyser is a bridge between Minecraft: Bedrock Edition and Minecraft: Java Edition, closing the gap from those wanting to play true cross-platform. Geyser is an open collaboration project by CubeCraft Games. What is Geyser? \u00b6 Geyser is a proxy, bridging the gap between Minecraft: Bedrock Edition and Minecraft: Java Edition servers. The ultimate goal of this project is to allow Minecraft: Bedrock Edition users to join Minecraft: Java Edition servers as seamlessly as possible. Please note, this project is still a work in progress and should not be used on production. Expect bugs! Special thanks to the DragonProxy project for being a trailblazer in protocol translation and for all the team members who have now joined us here! Note Currently supporting Minecraft Bedrock v1.14.6(0) and Minecraft Java v1.15.2. Setting Up \u00b6 Take a look here for how to set up Geyser. Links: \u00b6 Website: https://geysermc.org Docs: https://github.com/GeyserMC/Geyser/wiki Download: http://ci.geysermc.org Discord: http://discord.geysermc.org/ Donate: https://patreon.com/GeyserMC Libraries Used: \u00b6 NukkitX Bedrock Protocol Library Steveice10's Java Protocol Library TerminalConsoleAppender Simple Logging Facade for Java (slf4j)","title":"Introduction"},{"location":"#what-is-geyser","text":"Geyser is a proxy, bridging the gap between Minecraft: Bedrock Edition and Minecraft: Java Edition servers. The ultimate goal of this project is to allow Minecraft: Bedrock Edition users to join Minecraft: Java Edition servers as seamlessly as possible. Please note, this project is still a work in progress and should not be used on production. Expect bugs! Special thanks to the DragonProxy project for being a trailblazer in protocol translation and for all the team members who have now joined us here! Note Currently supporting Minecraft Bedrock v1.14.6(0) and Minecraft Java v1.15.2.","title":"What is Geyser?"},{"location":"#setting-up","text":"Take a look here for how to set up Geyser.","title":"Setting Up"},{"location":"#links","text":"Website: https://geysermc.org Docs: https://github.com/GeyserMC/Geyser/wiki Download: http://ci.geysermc.org Discord: http://discord.geysermc.org/ Donate: https://patreon.com/GeyserMC","title":"Links:"},{"location":"#libraries-used","text":"NukkitX Bedrock Protocol Library Steveice10's Java Protocol Library TerminalConsoleAppender Simple Logging Facade for Java (slf4j)","title":"Libraries Used:"},{"location":"coding/","text":"Coding \u00b6 This section will contain a list of coding hints for when working with Geyser either as a contributer or as a plugin developer. Async Tasks \u00b6 You can obtain a ScheduledExectorService by using GeyserConnector#getGeneralThreadPool . Example GeyserConnector . getInstance (). getGeneralThreadPool (). schedule (() -> { ... }, 5 , TimeUnit . SECONDS );","title":"Coding Hints"},{"location":"coding/#coding","text":"This section will contain a list of coding hints for when working with Geyser either as a contributer or as a plugin developer.","title":"Coding"},{"location":"coding/#async-tasks","text":"You can obtain a ScheduledExectorService by using GeyserConnector#getGeneralThreadPool . Example GeyserConnector . getInstance (). getGeneralThreadPool (). schedule (() -> { ... }, 5 , TimeUnit . SECONDS );","title":"Async Tasks"},{"location":"contributing/","text":"Contributing \u00b6 Here are some ways that you can help contribute to this project. New ideas or Bug Reports \u00b6 Need something? Found a bug? Or just have a brilliant idea? Head to the Issues and create a new one. Please feel free to reach out to us on Discord if you're interested in helping out with Geyser. Contributing Code \u00b6 If you know Java then take a look at open issues and create a pull request. Do the following to build the code: git clone https://github.com/GeyserMC/Geyser cd Geyser git submodule update --init --recursive mvn clean install Contributing Documentation \u00b6 If you can help improve the documentation it would be highly appreciated. Have a look under the docs folder for the existing documentation. The documentation is built using mkdocs . You can set up a hot-build dev environment that will auto-refresh changes as they are made. Requirements \u00b6 python3 pip3 npm (only if changing themes) Install dependencies by running: pip3 install -r requirements.txt Note It's recommended to use a virtualenv so that you don't pollute your system environment. Dev Environment \u00b6 To start a http document server on http://127.0.0.1:8000 execute: mkdocs serve Change PDF Theme \u00b6 Edit the PDF theme under docs/theme/pdf . Rebuild by doing the following: cd docs/theme/pdf npm install npm run build-compressed This will update pdf.css under docs/css/pdf.css . Rebuilding the docs will now use the new theme.","title":"Contributing"},{"location":"contributing/#contributing","text":"Here are some ways that you can help contribute to this project.","title":"Contributing"},{"location":"contributing/#new-ideas-or-bug-reports","text":"Need something? Found a bug? Or just have a brilliant idea? Head to the Issues and create a new one. Please feel free to reach out to us on Discord if you're interested in helping out with Geyser.","title":"New ideas or Bug Reports"},{"location":"contributing/#contributing-code","text":"If you know Java then take a look at open issues and create a pull request. Do the following to build the code: git clone https://github.com/GeyserMC/Geyser cd Geyser git submodule update --init --recursive mvn clean install","title":"Contributing Code"},{"location":"contributing/#contributing-documentation","text":"If you can help improve the documentation it would be highly appreciated. Have a look under the docs folder for the existing documentation. The documentation is built using mkdocs . You can set up a hot-build dev environment that will auto-refresh changes as they are made.","title":"Contributing Documentation"},{"location":"contributing/#requirements","text":"python3 pip3 npm (only if changing themes) Install dependencies by running: pip3 install -r requirements.txt Note It's recommended to use a virtualenv so that you don't pollute your system environment.","title":"Requirements"},{"location":"contributing/#dev-environment","text":"To start a http document server on http://127.0.0.1:8000 execute: mkdocs serve","title":"Dev Environment"},{"location":"contributing/#change-pdf-theme","text":"Edit the PDF theme under docs/theme/pdf . Rebuild by doing the following: cd docs/theme/pdf npm install npm run build-compressed This will update pdf.css under docs/css/pdf.css . Rebuilding the docs will now use the new theme.","title":"Change PDF Theme"},{"location":"events/","text":"Events \u00b6 Geyser has an Event Manager that allows one to listen to or trigger an event easily. Events can be easily defined either by defining a method to be an event handler or by providing a lambda. Each event handler will be executed in turn based upon their priority. Triggering an Event \u00b6 An event derives from GeyserEvent and can implement Cancellable if it should support being cancelled, and EventSession if it should support a GeyserSession . Example public class MyCustomEvent extends GeyserEvent implements Cancellable { } The event can be triggered through the triggerEvent method of the EventManager . Example EventManager . getInstance (). triggerEvent ( new MyCustomEvent ()); This returns an EventResult which can be used to chain additional commands based upon the result. They include onNotCancelled() , onCancelled() and orElse() to more easily execute based upon the result. All methods can be chained together. Example EventManager . getInstance (). triggerEvent ( new MyCustomEvent ()) . onNotCancelled ( result -> { // Code executed if events were not cancelled }) . orElse (( result ) -> { // Code executed if the above condition was not satisfied }); Example EventResult < MyCustomEvent > result = EventManager . getInstance (). triggerEvent ( new MyCustomEvent ()); if ( ! result . isCancelled ()) { // do something } Listening to an Event \u00b6 There are two ways to listen for an event. One can either create an event handler method or one can create an anonymous lamda to be executed when the event is triggered. Class Event Handler \u00b6 An event handler method is a method that is annotated with @GeyserEventHandler . The class it belongs to must also be registered with the event manager. Example public class MyClass { @Event public void onMyEvent ( MyCustomEvent event ) { GeyserConnector . getInstance (). getLogger (). info ( \"Hello World\" ); } } ... EventManager (). getInstance (). registerEvents ( new MyClass ()); Important Extensions should use the registerEvents method inherited from GeyserExtension . MyCustomEvent is the event defined previously. Anonymous Lambda \u00b6 An event can be hooked through the on method of the EventManager provided with an anonymous function. This allows code to be placed logically close to where it is related in the code instead of having to set up a separate class and method listeners. You will need to remember to unregister an event handler when needed. Example EventHandler < MyCustomEvent > handler = EventManager . getInstance (). on ( MyCustomEvent . class , event -> { System . err . println ( \"Hello World\" ); }) . build (); Important Extensions should use the on method inherited from GeyserExtension . You'll note the build() on the end. on() returns a Builder that can add optional parameters. This must be finalized with a build() that generates the EventHandler and registers it with the EventManager. The following additional parameters are available: priority(int) - Set the event priority. Default EventHandler.Priority.NORMAL ignoreCancelled(boolean) - If true the handler will not execute if cancelled. Default true . Example EventHandler < MyCustomEvent > handler = EventManager . getInstance (). on ( MyCustomEvent . class , event -> { System . err . println ( \"Hello World\" ); }) . priority ( 30 ) . ignoreCancelled ( false ) . build (); Events \u00b6 Please refer to the API Docs for more information. Geyser events are defined under org.geysermc.connector.event.events . Geyser has the following predefined Events.","title":"Events"},{"location":"events/#events","text":"Geyser has an Event Manager that allows one to listen to or trigger an event easily. Events can be easily defined either by defining a method to be an event handler or by providing a lambda. Each event handler will be executed in turn based upon their priority.","title":"Events"},{"location":"events/#triggering-an-event","text":"An event derives from GeyserEvent and can implement Cancellable if it should support being cancelled, and EventSession if it should support a GeyserSession . Example public class MyCustomEvent extends GeyserEvent implements Cancellable { } The event can be triggered through the triggerEvent method of the EventManager . Example EventManager . getInstance (). triggerEvent ( new MyCustomEvent ()); This returns an EventResult which can be used to chain additional commands based upon the result. They include onNotCancelled() , onCancelled() and orElse() to more easily execute based upon the result. All methods can be chained together. Example EventManager . getInstance (). triggerEvent ( new MyCustomEvent ()) . onNotCancelled ( result -> { // Code executed if events were not cancelled }) . orElse (( result ) -> { // Code executed if the above condition was not satisfied }); Example EventResult < MyCustomEvent > result = EventManager . getInstance (). triggerEvent ( new MyCustomEvent ()); if ( ! result . isCancelled ()) { // do something }","title":"Triggering an Event"},{"location":"events/#listening-to-an-event","text":"There are two ways to listen for an event. One can either create an event handler method or one can create an anonymous lamda to be executed when the event is triggered.","title":"Listening to an Event"},{"location":"events/#class-event-handler","text":"An event handler method is a method that is annotated with @GeyserEventHandler . The class it belongs to must also be registered with the event manager. Example public class MyClass { @Event public void onMyEvent ( MyCustomEvent event ) { GeyserConnector . getInstance (). getLogger (). info ( \"Hello World\" ); } } ... EventManager (). getInstance (). registerEvents ( new MyClass ()); Important Extensions should use the registerEvents method inherited from GeyserExtension . MyCustomEvent is the event defined previously.","title":"Class Event Handler"},{"location":"events/#anonymous-lambda","text":"An event can be hooked through the on method of the EventManager provided with an anonymous function. This allows code to be placed logically close to where it is related in the code instead of having to set up a separate class and method listeners. You will need to remember to unregister an event handler when needed. Example EventHandler < MyCustomEvent > handler = EventManager . getInstance (). on ( MyCustomEvent . class , event -> { System . err . println ( \"Hello World\" ); }) . build (); Important Extensions should use the on method inherited from GeyserExtension . You'll note the build() on the end. on() returns a Builder that can add optional parameters. This must be finalized with a build() that generates the EventHandler and registers it with the EventManager. The following additional parameters are available: priority(int) - Set the event priority. Default EventHandler.Priority.NORMAL ignoreCancelled(boolean) - If true the handler will not execute if cancelled. Default true . Example EventHandler < MyCustomEvent > handler = EventManager . getInstance (). on ( MyCustomEvent . class , event -> { System . err . println ( \"Hello World\" ); }) . priority ( 30 ) . ignoreCancelled ( false ) . build ();","title":"Anonymous Lambda"},{"location":"events/#events_1","text":"Please refer to the API Docs for more information. Geyser events are defined under org.geysermc.connector.event.events . Geyser has the following predefined Events.","title":"Events"},{"location":"extensions/","text":"Extensions \u00b6 Geyser provides support for third party extensions which can be placed into a extensions folder under the Geyser data folder. Extensions provide a way to extend the features of Geyser without needing to deal with the Geyser code. This page describes how to write a extension. Alert Please keep in mind that Geyser itself may run as a plugin to a server or standalone. If you wish to have your extension supported by a wide audience try to write it as if it runs on the standalone version of Geyser and thus does not have access to the server code. For example don't assume you can access the Spigot API unless you wish to limit your extension to run only on Geyser running as a Spigot plugin. Maven \u00b6 Add the following to the relevant section of your pom.xml <repositories> <!-- Bundabrg's Repo --> <repository> <id> bundabrg-repo </id> <url> https://repo.worldguard.com.au/repository/maven-public </url> <releases> <enabled> true </enabled> </releases> <snapshots> <enabled> true </enabled> </snapshots> </repository> </repositories> <dependencies> <!-- Geyser --> <dependency> <groupId> org.geysermc </groupId> <artifactId> connector </artifactId> <version> 1.4.0-ext-SNAPSHOT </version> <scope> provided </scope> </dependency> </dependencies> Info Extension support is presently only available through a feature branch and thus there will be references to a third party maven repository that holds a build of this branch. This will change in the future. Example Extension \u00b6 @Extension ( name = \"ExampleExtension\" , version = \"1.1.0-dev\" , authors = { \"bundabrg\" }, description = \"Provides an example extension\" ) public class MyExtension extends GeyserExtension { public MyExtension ( ExtensionManager extensionManager , ExtensionClassLoader extensionClassLoader ) { super ( extensionManager , extensionClassLoader ); } @GeyserEventHandler public void onStartup ( GeyserStartEvent event ) { System . err . println ( \"I'm alive\" ); // Register another class with event handlers registerEvents ( new MyAdditionalClass ()); // Example of lambda event hook EventHandler < GeyserStopEvent > handler = on ( GeyserStopEvent . class , event -> { System . err . println ( \"I'm also dead\" ); }) . priority ( EventHandler . Priority . HIGH ); } @GeyserEventHandler public void onDisable ( GeyserStopEvent event ) { System . err . println ( \"I'm dead\" ); } } Extension EntryPoint \u00b6 A extension must at a minimum define a class that extends GeyserExtension and be annotated with @Extension . The annotation provides details about the extension such as its version and author(s). The following fields are available for @Extension : name - Name of the extension. Used in the logs. version - Version of the extension. authors - A list of authors description - A short description of the extension global - Should the extension make its classes available to other extensions (default: true) Extension Events \u00b6 A extension will generally hook into several events and provides its own event registration inherited from GeyserExtension . A extension class will look for any methods annotated with @GeyserEventHandler and will treat them as Event Handlers, using reflection to determine which event is trapped. In the previous example the extension has trapped both the GeyserStartEvent and GeyserStopEvent . Please refer to events for more information about the event system. Note There is no need to register the extension class for events as it will be registered by default. Note The extension class itself provides many of the registration methods found in the Event Manager to track which events belong to the extension. You should use the extensions own registration methods in preference to those in the Event Manger. This includes registerEvents and on . Plugin Messages \u00b6 A extension can communicate with a extension on the downstream server through the use of plugin message channels. More information about this can be found here . Sending a Plugin Message \u00b6 To send a plugin message use GeyserSession#sendPluginMessage. Example ByteArrayDataOutput out = ByteStreams . newDataOutput (); out . writeUTF ( \"Data1\" ); out . writeUTF ( \"Data2\" ); session . sendPluginMessage ( \"myextension:channel\" , out . toByteArray ()); Receiving Plugin Messages \u00b6 To receive plugin messages you need to first register to receive the message then listen for the PluginMessageEvent . Example GeyserConnector . getInstance (). registerPluginChannel ( \"myextension:channelname\" ); ''' @Event void public onPluginMessageEvent ( PluginMessageEvent event ) { if ( ! event . getChannel (). equals ( \"myextension:channelname\" )) { return ; } ... } Logging \u00b6 Extension classes use their getLogger() to retrieve a logging interface. This will log messages to the regular log with the extension name prefixed in the messages. Example @Extension (...) public class MyExtension extends GeyserExtension { public void myMethod () { ... getLogger (). info ( \"This is an informative message!\" ); } }","title":"Extensions"},{"location":"extensions/#extensions","text":"Geyser provides support for third party extensions which can be placed into a extensions folder under the Geyser data folder. Extensions provide a way to extend the features of Geyser without needing to deal with the Geyser code. This page describes how to write a extension. Alert Please keep in mind that Geyser itself may run as a plugin to a server or standalone. If you wish to have your extension supported by a wide audience try to write it as if it runs on the standalone version of Geyser and thus does not have access to the server code. For example don't assume you can access the Spigot API unless you wish to limit your extension to run only on Geyser running as a Spigot plugin.","title":"Extensions"},{"location":"extensions/#maven","text":"Add the following to the relevant section of your pom.xml <repositories> <!-- Bundabrg's Repo --> <repository> <id> bundabrg-repo </id> <url> https://repo.worldguard.com.au/repository/maven-public </url> <releases> <enabled> true </enabled> </releases> <snapshots> <enabled> true </enabled> </snapshots> </repository> </repositories> <dependencies> <!-- Geyser --> <dependency> <groupId> org.geysermc </groupId> <artifactId> connector </artifactId> <version> 1.4.0-ext-SNAPSHOT </version> <scope> provided </scope> </dependency> </dependencies> Info Extension support is presently only available through a feature branch and thus there will be references to a third party maven repository that holds a build of this branch. This will change in the future.","title":"Maven"},{"location":"extensions/#example-extension","text":"@Extension ( name = \"ExampleExtension\" , version = \"1.1.0-dev\" , authors = { \"bundabrg\" }, description = \"Provides an example extension\" ) public class MyExtension extends GeyserExtension { public MyExtension ( ExtensionManager extensionManager , ExtensionClassLoader extensionClassLoader ) { super ( extensionManager , extensionClassLoader ); } @GeyserEventHandler public void onStartup ( GeyserStartEvent event ) { System . err . println ( \"I'm alive\" ); // Register another class with event handlers registerEvents ( new MyAdditionalClass ()); // Example of lambda event hook EventHandler < GeyserStopEvent > handler = on ( GeyserStopEvent . class , event -> { System . err . println ( \"I'm also dead\" ); }) . priority ( EventHandler . Priority . HIGH ); } @GeyserEventHandler public void onDisable ( GeyserStopEvent event ) { System . err . println ( \"I'm dead\" ); } }","title":"Example Extension"},{"location":"extensions/#extension-entrypoint","text":"A extension must at a minimum define a class that extends GeyserExtension and be annotated with @Extension . The annotation provides details about the extension such as its version and author(s). The following fields are available for @Extension : name - Name of the extension. Used in the logs. version - Version of the extension. authors - A list of authors description - A short description of the extension global - Should the extension make its classes available to other extensions (default: true)","title":"Extension EntryPoint"},{"location":"extensions/#extension-events","text":"A extension will generally hook into several events and provides its own event registration inherited from GeyserExtension . A extension class will look for any methods annotated with @GeyserEventHandler and will treat them as Event Handlers, using reflection to determine which event is trapped. In the previous example the extension has trapped both the GeyserStartEvent and GeyserStopEvent . Please refer to events for more information about the event system. Note There is no need to register the extension class for events as it will be registered by default. Note The extension class itself provides many of the registration methods found in the Event Manager to track which events belong to the extension. You should use the extensions own registration methods in preference to those in the Event Manger. This includes registerEvents and on .","title":"Extension Events"},{"location":"extensions/#plugin-messages","text":"A extension can communicate with a extension on the downstream server through the use of plugin message channels. More information about this can be found here .","title":"Plugin Messages"},{"location":"extensions/#sending-a-plugin-message","text":"To send a plugin message use GeyserSession#sendPluginMessage. Example ByteArrayDataOutput out = ByteStreams . newDataOutput (); out . writeUTF ( \"Data1\" ); out . writeUTF ( \"Data2\" ); session . sendPluginMessage ( \"myextension:channel\" , out . toByteArray ());","title":"Sending a Plugin Message"},{"location":"extensions/#receiving-plugin-messages","text":"To receive plugin messages you need to first register to receive the message then listen for the PluginMessageEvent . Example GeyserConnector . getInstance (). registerPluginChannel ( \"myextension:channelname\" ); ''' @Event void public onPluginMessageEvent ( PluginMessageEvent event ) { if ( ! event . getChannel (). equals ( \"myextension:channelname\" )) { return ; } ... }","title":"Receiving Plugin Messages"},{"location":"extensions/#logging","text":"Extension classes use their getLogger() to retrieve a logging interface. This will log messages to the regular log with the extension name prefixed in the messages. Example @Extension (...) public class MyExtension extends GeyserExtension { public void myMethod () { ... getLogger (). info ( \"This is an informative message!\" ); } }","title":"Logging"}]}